<?php

use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Types\Type;

assert($metadata instanceof ClassMetadata);

$metadata->mapField([
    'name' => '_id',
    'fieldName' => 'id',
    'type' => Type::ID,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::GENERATOR_TYPE_AUTO,
    'notSaved' => false,
    'id' => true,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapField([
    'name' => 'title',
    'fieldName' => 'title',
    'type' => Type::STRING,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'enumType' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapField([
    'name' => 'slug',
    'fieldName' => 'slug',
    'type' => Type::STRING,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'enumType' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapField([
    'name' => 'summary',
    'fieldName' => 'summary',
    'type' => Type::STRING,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'enumType' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapField([
    'name' => 'content',
    'fieldName' => 'content',
    'type' => Type::STRING,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'enumType' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapField([
    'name' => 'publishedAt',
    'fieldName' => 'publishedAt',
    'type' => Type::DATE_IMMUTABLE,
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'enumType' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapOneReference([
    'name' => 'author',
    'fieldName' => 'author',
    'targetDocument' => 'App\\Document\\User',
    'storeAs' => 'dbRef',
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_SET,
    'notSaved' => false,
    'reference' => true,
    'discriminatorField' => null,
    'discriminatorMap' => null,
    'defaultDiscriminatorValue' => null,
    'orphanRemoval' => false,
    'inversedBy' => null,
    'mappedBy' => null,
    'repositoryMethod' => null,
    'sort' => [],
    'criteria' => [],
    'limit' => null,
    'skip' => null,
    'cascade' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'association' => 1,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapManyReference([
    'name' => 'comments',
    'fieldName' => 'comments',
    'targetDocument' => 'App\\Document\\Comment',
    'storeAs' => 'dbRef',
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_PUSH_ALL,
    'notSaved' => false,
    'reference' => true,
    'discriminatorField' => null,
    'discriminatorMap' => null,
    'defaultDiscriminatorValue' => null,
    'orphanRemoval' => false,
    'inversedBy' => null,
    'mappedBy' => null,
    'repositoryMethod' => null,
    'sort' => [],
    'criteria' => [],
    'limit' => null,
    'skip' => null,
    'collectionClass' => null,
    'prime' => [],
    'storeEmptyArray' => false,
    'cascade' => null,
    'isCascadeRemove' => false,
    'isCascadePersist' => false,
    'isCascadeRefresh' => false,
    'isCascadeMerge' => false,
    'isCascadeDetach' => false,
    'association' => 2,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
$metadata->mapManyEmbedded([
    'name' => 'tags',
    'fieldName' => 'tags',
    'targetDocument' => 'App\\Document\\Tag',
    'nullable' => false,
    'options' => [],
    'strategy' => ClassMetadata::STORAGE_STRATEGY_PUSH_ALL,
    'notSaved' => false,
    'embedded' => true,
    'discriminatorField' => null,
    'discriminatorMap' => null,
    'defaultDiscriminatorValue' => null,
    'collectionClass' => null,
    'storeEmptyArray' => false,
    'isCascadeRemove' => true,
    'isCascadePersist' => true,
    'isCascadeRefresh' => true,
    'isCascadeMerge' => true,
    'isCascadeDetach' => true,
    'association' => 4,
    'isOwningSide' => true,
    'isInverseSide' => false,
]);
